server:
  port: 8080

spring:
  application:
    name: appointmentMS
  profiles:
    active: "dev"
  # H2 database
#  datasource:
#    url: jdbc:h2:mem:testdb
#    driverClassName: org.h2.Driver
#    username: sa
#    password: ''
#  h2:
#    console:
#      enabled: true
#  jpa:
#    database-platform: org.hibernate.dialect.H2Dialect
#    hibernate:
#      ddl-auto: update
#    show-sql: true
  # PostgreSQL
  datasource:
    url: jdbc:postgresql://localhost:5432/appointmentDb
    username: postgres
    password: root
  jpa:
    database: POSTGRESQL
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: salty-fish-client
            client-secret: heNZPrrltsZBT7SEXErwC5zRjykpKDke
            authorization-grant-type: authorization_code
            scope: openid
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/auth/realms/SaltyFish
  rabbitmq:
    hots: localhost
    port: 5672
    username: guest
    password: guest
#  config:
#    import: "optional:configserver:http://localhost:8071/"
#  cloud:
#    kubernetes:
#      discovery:
#        all-namespaces: true
#    openfeign:
#      circuitbreaker:
#        enabled: true
#    functions:
#      definition: updateCommunication
#    stream:
#      bindings:
#        updateCommunication-in-0:
#          destination: communication-sent
#          group: ${spring.application.name}
#        sendCommunication-out-0:
#          destination: send-communication
#      kafka:
#        binder:
#          brokers:
#            - localhost: 9092
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true



info:
  app:
    name: "appointment"
    description: "SaltyFish Appointment Application"
    version: "1.0.0"

logging:
  level:
    com:
      saltyFish:
        appointment: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000
      limitForPeriod: 1

build:
  version: "1.0"