package com.saltyFish.user.service.impl;

import com.saltyFish.user.dto.userDto.UserDto;
import com.saltyFish.user.entity.User;
import com.saltyFish.user.exception.UserAlreadyExistsException;
import com.saltyFish.user.mapper.UserMapper;
import com.saltyFish.user.repository.UserDAO;
import com.saltyFish.user.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

public abstract class UserServiceImpl implements UserService {

    protected UserDAO userDAO;

    protected BCryptPasswordEncoder passwordEncoder;

    @Autowired
    public UserServiceImpl(UserDAO userDAO, BCryptPasswordEncoder passwordEncoder) {
        this.userDAO = userDAO;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public UserDto registerUser(UserDto userDto) {
        if (!userDAO.findUsersByEmail(userDto.getEmail()).isEmpty()) {
            throw new UserAlreadyExistsException(String.format("User with email %s already exists", userDto.getEmail()));
        }
        String encodedPassword = passwordEncoder.encode(userDto.getPassword());
        User user = createUser(userDto);
        user.setPassword(encodedPassword);
        User savedUser = userDAO.save(user);
        return new UserDto() {
        };
    }

    @Override
    public UserDto updateUser(UserDto userDto) {
        return null;
    }

    @Override
    public boolean deleteUser(Long userId) {
        return false;
    }

    @Override
    public boolean activateMembership(Long userId) {
        return false;
    }

    protected abstract User createUser(UserDto userDto);
}
